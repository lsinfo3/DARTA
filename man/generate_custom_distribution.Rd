% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/generate_distributions.R
\name{generate_custom_distribution}
\alias{generate_custom_distribution}
\title{Generate time-series of a custom distribution}
\usage{
generate_custom_distribution(
  n,
  cdf,
  inv,
  mean,
  name,
  var,
  rho,
  gamma = 1e-05,
  method = "interpol",
  n_interpol = 30,
  epsilon = 0.001,
  use_caching = T,
  ...
)
}
\arguments{
\item{n}{length of time-series to be generated, i.e., total size of the
vector of random numbers that is returned.}

\item{cdf}{Cumulative distribution function of the custom distribution}

\item{inv}{Inverse cumulative distribution function, i.e. quantile function,
of custom distribution}

\item{mean}{Mean of Custom distribution}

\item{name}{Name of the custom distribution, used for caching. Should be
chosen uniquely for each cdf, but different parameterizations of the
distribution can be cached for the same name, as long as they are passed in
as function arguments.}

\item{var}{Variance of custom distribution}

\item{rho}{Autocorrelation structure to be approximated, as a vector of
\code{numerics}.}

\item{gamma}{Numeric, controls accuracy of DARTA's autocorrelation
approximation mechanism, lower being more accurate. Defaults to 10^-5.}

\item{method}{Defines method for autocorrelation structure approximation.
'binary' employs a binary search, ending when autocorrelation in target
process is within error margin 'epsilon' of desired autocorrelation.
'interpol' fits a function through 'n_interpol' autocorrelation values
calculated from equidistant points in the base process autocorrelation
space, then interpolates a fitting base process autocorrelation from these
values.}

\item{n_interpol}{Natural number, decides how many equidistant points in the
base process autocorrelation space should be sampled in order to fit a
polynomial function. Defaults to 30.}

\item{epsilon}{Numeric between 0 and 1, controls acceptable error within
which the target autocorrelation is to be approximated by the base process
when the 'binary' method is used. Defaults to 0.001.}

\item{use_caching}{Logical, deciding whether results should be cached, and
cached results used in the computation. Defaults to TRUE.}

\item{...}{Additional distribution arguments. All additional arguments will
be passed to the cdf and inv functions to fully parameterize them. They are
also used to parameterize the name of the distribution, so each
parameterization of a distribution has a unique cache.}
}
\value{
Vector containing a time-series of length n with autocorrelation rho
and cumstom marginal distribution.
}
\description{
Generate time-series of a custom distribution
}
\examples{
library(DARTA)
library(purrr)

# In this example, we are going to create autocorrelated values from a hypergeometric distribution.
# To do this, we need a fitting cumulative distribution function (cdf), quantile function (inv),
# and the distributions mean and variance

# Define Function parameters
n <-30
m <- 30
k <- 30

# Here, we pre-set the n parameter early, as it clashes with the n parameter in the generate_custom_distribution function
cdf <- partial(phyper, n = n)
inv <- partial(qhyper, n = n)

# Calculate mean and variance for the Hypergeometric distribution, see also https://stat.ethz.ch/R-manual/R-devel/library/stats/html/Hypergeometric.html
mean <- k*m/(m+n)
var <- k*m/(m+n)*(1-m/(m+n))*(m+n-k)/(m+n-1)

# Atutocorrelation structure
rho <- c(0.5,0.3,0.2,0.15)

# generate sample.
# We pass the parameters 'm' and 'k' as function arguments. We could have also set them as we did with 'n' above, but when they are passed into the function, caching will be able to discern between different parameterizations of the same distribution
# The 'name' argument is only used when caching is enabled. Make sure to use different names for different custom distributions, or the wrong cache may be used.
vec <-
  generate_custom_distribution(
    n = 1e6,
    name = paste("hypergeometric", n, sep = "-"),
    cdf = cdf,
    inv = inv,
    mean = mean,
    var = var,
    m = m,
    k = k,
    rho = rho,
    method = "interpol",
    use_caching = T
  )

# plot autocorrelation
acf(vec)

# plot empirical CDF
plot(ecdf(vec))

# compare to binomial distribution
plot(ecdf(rhyper(1e5,n =n, m =m, k = k)))

}
\seealso{
\code{\link{generate_distribution}}
}
